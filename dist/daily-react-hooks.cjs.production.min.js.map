{"version":3,"file":"daily-react-hooks.cjs.production.min.js","sources":["../src/DailyContext.tsx","../src/DailyEventContext.tsx","../src/hooks/useDaily.ts","../src/hooks/useDailyEvent.ts","../src/hooks/useThrottledDailyEvent.ts","../src/DailyParticipants.tsx","../src/utils/resolveParticipantPath.ts","../src/DailyRoom.tsx","../src/hooks/useParticipant.ts","../src/hooks/useActiveParticipant.ts","../src/hooks/useMediaTrack.ts","../src/hooks/useDevices.ts","../src/hooks/useInputSettings.ts","../src/hooks/useLiveStreaming.ts","../src/hooks/useLocalSessionId.ts","../src/hooks/useNetwork.ts","../src/hooks/useParticipantIds.ts","../src/hooks/useReceiveSettings.ts","../src/hooks/useRecording.ts","../src/hooks/useWaitingParticipants.ts","../src/DailyProvider.tsx","../src/hooks/useAppMessage.ts","../src/hooks/useAudioTrack.ts","../src/hooks/useLocalParticipant.ts","../src/hooks/useParticipantProperty.ts","../src/hooks/useRoom.ts","../src/hooks/useScreenAudioTrack.ts","../src/hooks/useScreenShare.ts","../src/hooks/useScreenVideoTrack.ts","../src/hooks/useVideoTrack.ts"],"sourcesContent":["import { DailyCall } from '@daily-co/daily-js';\nimport { createContext } from 'react';\n\nexport const DailyContext = createContext<DailyCall | null>(null);\n","import { DailyEvent } from '@daily-co/daily-js';\nimport { createContext } from 'react';\n\ninterface EventContextValue {\n  on(ev: DailyEvent, callback: Function, key: number): void;\n  off(ev: DailyEvent, key: number): void;\n}\n\nexport const DailyEventContext = createContext<EventContextValue>({\n  on: () => {},\n  off: () => {},\n});\n","import { useContext } from 'react';\n\nimport { DailyContext } from '../DailyContext';\n\n/**\n * Returns callObject instance passed to or created by closest <DailyProvider>.\n */\nexport const useDaily = () => {\n  const daily = useContext(DailyContext);\n  return daily;\n};\n","import { DailyEvent, DailyEventObject } from '@daily-co/daily-js';\nimport { useContext, useEffect, useMemo, useRef, useState } from 'react';\n\nimport { DailyEventContext } from '../DailyEventContext';\n\ntype EventCallback = (event?: DailyEventObject) => void;\n\nlet uniqueCounter = 0;\nexport const getUnique = () => uniqueCounter++;\n\n/**\n * Sets up a daily event listener using [on](https://docs.daily.co/reference/daily-js/instance-methods/on) method.\n * When this hook is unmounted the event listener is unregistered using [off](https://docs.daily.co/reference/daily-js/instance-methods/off).\n *\n * Warning: callback has to be a memoized reference (e.g. via [useCallback](https://reactjs.org/docs/hooks-reference.html#usecallback)).\n * Otherwise a console error might be thrown indicating a re-render loop issue.\n *\n * @param ev The DailyEvent to register.\n * @param callback A memoized callback reference to run when the event is emitted.\n */\nexport const useDailyEvent = (ev: DailyEvent, callback: EventCallback) => {\n  const { off, on } = useContext(DailyEventContext);\n  const [isBlocked, setIsBlocked] = useState(false);\n  const reassignCount = useRef<number>(0);\n\n  const eventId = useMemo(() => getUnique(), []);\n\n  useEffect(() => {\n    if (!ev || isBlocked) return;\n    /**\n     * Check if callback has been reassigned often enough without hitting the 50ms timeout.\n     */\n    if (reassignCount.current > 100000) {\n      console.error(\n        `useDailyEvent called with potentially non-memoized event callback or due to too many re-renders.\n        Memoize using useCallback to avoid re-render loop or reduce the amount of state transitions the callback depends on.\n        Passed callback for '${ev}' event is NOT registered.`,\n        callback\n      );\n      setIsBlocked(true);\n      return;\n    }\n    reassignCount.current++;\n    const timeout = setTimeout(() => {\n      reassignCount.current = 0;\n    }, 50);\n    on(ev, callback, eventId);\n    return () => {\n      clearTimeout(timeout);\n      off(ev, eventId);\n    };\n  }, [callback, ev, eventId, isBlocked, off, on]);\n};\n","import { DailyEvent, DailyEventObject } from '@daily-co/daily-js';\nimport throttle from 'lodash.throttle';\nimport { useContext, useEffect, useMemo, useRef } from 'react';\n\nimport { DailyEventContext } from '../DailyEventContext';\nimport { getUnique } from './useDailyEvent';\n\ntype EventCallback = (events: DailyEventObject[]) => void;\n\n/**\n * Sets up a throttled daily event listener using [on](https://docs.daily.co/reference/daily-js/instance-methods/on) method.\n * When this hook is unmounted the event listener is unregistered using [off](https://docs.daily.co/reference/daily-js/instance-methods/off).\n *\n * In comparison to useDailyEvent the callback passed here will be called with an array of event objects.\n *\n * @param ev The DailyEvent to register.\n * @param callback A memoized callback reference to run when throttled events are emitted.\n * @param throttleTimeout The minimum waiting time until the callback is called again. Default: 100\n */\nexport const useThrottledDailyEvent = (\n  ev: DailyEvent,\n  callback: EventCallback,\n  throttleTimeout = 100\n) => {\n  const { off, on } = useContext(DailyEventContext);\n  const eventId = useMemo(() => getUnique(), []);\n\n  const throttledEvents = useRef<DailyEventObject[]>([]);\n\n  const emitEvents = useMemo(\n    () =>\n      throttle(\n        () => {\n          if (throttledEvents.current.length === 0) return;\n          callback(throttledEvents.current);\n          throttledEvents.current = [];\n        },\n        throttleTimeout,\n        {\n          trailing: true,\n        }\n      ),\n    [callback, throttleTimeout]\n  );\n\n  useEffect(() => {\n    if (!ev) return;\n    const addEvent = (ev: DailyEventObject) => {\n      throttledEvents.current.push(ev);\n      /**\n       * A 0ms timeout allows the event loop to process additional incoming events,\n       * while the throttle is active. Otherwise every event would be delayed.\n       */\n      setTimeout(emitEvents, 0);\n    };\n    on(ev, addEvent, eventId);\n    return () => {\n      off(ev, eventId);\n    };\n  }, [emitEvents, ev, eventId, off, on]);\n};\n","import {\n  DailyEventObjectActiveSpeakerChange,\n  DailyEventObjectParticipant,\n  DailyEventObjectParticipants,\n  DailyParticipant,\n  DailyParticipantsObject,\n} from '@daily-co/daily-js';\nimport React, { useCallback, useEffect } from 'react';\nimport { atom, selectorFamily, useRecoilCallback } from 'recoil';\n\nimport type { Paths } from './types/paths';\nimport type { PathValue } from './types/pathValue';\nimport { useDaily } from './hooks/useDaily';\nimport { useDailyEvent } from './hooks/useDailyEvent';\nimport { useThrottledDailyEvent } from './hooks/useThrottledDailyEvent';\nimport { resolveParticipantPath } from './utils/resolveParticipantPath';\n\n/**\n * Extends DailyParticipant with convenient additional properties.\n */\nexport interface ExtendedDailyParticipant extends DailyParticipant {\n  last_active?: Date;\n}\n\ntype PropertyType = {\n  id: string;\n  property: Paths<ExtendedDailyParticipant>;\n};\n\nexport const localIdState = atom<string>({\n  key: 'local-id',\n  default: '',\n});\n\nexport const participantsState = atom<ExtendedDailyParticipant[]>({\n  key: 'participants-objects',\n  default: [],\n});\n\n/**\n * Holds each individual participant's state object.\n */\nexport const participantState = selectorFamily<\n  ExtendedDailyParticipant | null,\n  string\n>({\n  key: 'participant',\n  get:\n    (id) =>\n    ({ get }) => {\n      const participants = get(participantsState);\n      return participants.find((p) => p.session_id === id) ?? null;\n    },\n});\n\n/**\n * Holds each individual participant's property.\n */\nexport const participantPropertyState = selectorFamily<\n  PathValue<ExtendedDailyParticipant, Paths<ExtendedDailyParticipant>> | null,\n  PropertyType\n>({\n  key: 'participant-property',\n  get:\n    ({ id, property }) =>\n    ({ get }) => {\n      const participants = get(participantsState);\n      const participant = participants.find((p) => p.session_id === id) ?? null;\n\n      if (!participant) return null;\n      return resolveParticipantPath(participant, property);\n    },\n});\n\nexport const DailyParticipants: React.FC<React.PropsWithChildren<{}>> = ({\n  children,\n}) => {\n  const daily = useDaily();\n\n  useDailyEvent(\n    'active-speaker-change',\n    useRecoilCallback(\n      ({ set, snapshot }) =>\n        async (ev: DailyEventObjectActiveSpeakerChange) => {\n          const sessionId = ev.activeSpeaker.peerId;\n          let participant = await snapshot.getPromise(\n            participantState(sessionId)\n          );\n          if (!participant && daily) {\n            participant = daily.participants()[sessionId];\n          }\n          if (!participant) return;\n          set(participantsState, (prev) =>\n            [...prev].map((p) =>\n              p.session_id === sessionId\n                ? {\n                    ...p,\n                    last_active: new Date(),\n                  }\n                : p\n            )\n          );\n        },\n      [daily]\n    )\n  );\n\n  const initParticipants = useRecoilCallback(\n    ({ set }) =>\n      async (participants: DailyParticipantsObject) => {\n        set(localIdState, participants.local.session_id);\n        set(participantsState, Object.values(participants));\n      },\n    []\n  );\n  /**\n   * Initialize participants state based on daily.participants().\n   * Retries every 100ms to initialize the state, until daily is ready.\n   */\n  useEffect(() => {\n    if (!daily) return;\n    const interval = setInterval(() => {\n      const participants = daily.participants();\n      if (!('local' in participants)) return;\n      initParticipants(participants);\n      clearInterval(interval);\n    }, 100);\n    return () => {\n      clearInterval(interval);\n    };\n  }, [daily, initParticipants]);\n  const handleInitEvent = useCallback(() => {\n    if (!daily) return;\n    const participants = daily?.participants();\n    if (!participants.local) return;\n    initParticipants(participants);\n  }, [daily, initParticipants]);\n  useDailyEvent('started-camera', handleInitEvent);\n  useDailyEvent('access-state-updated', handleInitEvent);\n  useDailyEvent('joining-meeting', handleInitEvent);\n  useDailyEvent(\n    'joined-meeting',\n    useCallback(\n      (ev: DailyEventObjectParticipants) => {\n        initParticipants(ev.participants);\n      },\n      [initParticipants]\n    )\n  );\n\n  /**\n   * Add new participant to state, if not already existent.\n   */\n  useThrottledDailyEvent(\n    'participant-joined',\n    useRecoilCallback(\n      ({ set }) =>\n        async (evts: DailyEventObjectParticipant[]) => {\n          if (!evts.length) return;\n          set(participantsState, (prev) =>\n            [...prev, ...evts.map(({ participant }) => participant)].filter(\n              (participant, idx, arr) =>\n                arr.findIndex((p) => p.session_id === participant.session_id) ==\n                idx\n            )\n          );\n        },\n      []\n    )\n  );\n\n  /**\n   * Update participant in state.\n   */\n  useThrottledDailyEvent(\n    'participant-updated',\n    useRecoilCallback(\n      ({ transact_UNSTABLE }) =>\n        (evts: DailyEventObjectParticipant[]) => {\n          transact_UNSTABLE(({ set }) => {\n            evts.forEach(({ participant }) => {\n              set(participantsState, (prev) =>\n                [...prev].map((p) =>\n                  p.session_id === participant.session_id ? participant : p\n                )\n              );\n            });\n          });\n        },\n      []\n    )\n  );\n\n  /**\n   * Remove left participant from state.\n   */\n  useThrottledDailyEvent(\n    'participant-left',\n    useRecoilCallback(\n      ({ set }) =>\n        (evts: DailyEventObjectParticipant[]) => {\n          set(participantsState, (prev) =>\n            [...prev].filter(\n              (p) =>\n                !evts.some((ev) => ev.participant.session_id === p.session_id)\n            )\n          );\n        },\n      []\n    )\n  );\n\n  /**\n   * Reset stored participants, when meeting has ended.\n   */\n  useDailyEvent(\n    'left-meeting',\n    useRecoilCallback(\n      ({ reset }) =>\n        () => {\n          reset(localIdState);\n          reset(participantsState);\n        },\n      []\n    )\n  );\n\n  return <>{children}</>;\n};\n","import type { Paths } from '../types/paths';\nimport { ExtendedDailyParticipant } from '../DailyParticipants';\n\nexport const resolveParticipantPath = (\n  participant: ExtendedDailyParticipant,\n  path: Paths<ExtendedDailyParticipant>\n) => {\n  // ignoring the typescript here as the Paths of ExtendedDailyParticipant are not directly accessible\n  // in the ExtendedDailyParticipant object\n  // @ts-ignore\n  return path.split('.').reduce((r, k) => r?.[k], participant);\n};\n","import { DailyRoomInfo } from '@daily-co/daily-js';\nimport React from 'react';\nimport { atom, useRecoilCallback } from 'recoil';\n\nimport { useDaily } from './hooks/useDaily';\nimport { useDailyEvent } from './hooks/useDailyEvent';\n\nexport const roomState = atom<DailyRoomInfo | null>({\n  key: 'room',\n  default: null,\n});\n\nexport const DailyRoom: React.FC<React.PropsWithChildren<{}>> = ({\n  children,\n}) => {\n  const daily = useDaily();\n\n  const updateRoom = useRecoilCallback(\n    ({ set }) =>\n      async () => {\n        if (!daily || daily.meetingState() === 'left-meeting') return;\n        const room = await daily.room();\n        if (room && 'id' in room) {\n          set(roomState, room);\n        }\n        return room;\n      },\n    [daily]\n  );\n\n  useDailyEvent('access-state-updated', updateRoom);\n\n  return <>{children}</>;\n};\n","import { DailyEventObjectParticipant } from '@daily-co/daily-js';\nimport { useCallback } from 'react';\nimport { useRecoilValue } from 'recoil';\n\nimport { participantState } from '../DailyParticipants';\nimport { useThrottledDailyEvent } from './useThrottledDailyEvent';\n\ninterface UseParticipantArgs {\n  onParticipantLeft?(ev: DailyEventObjectParticipant): void;\n  onParticipantUpdated?(ev: DailyEventObjectParticipant): void;\n}\n\n/**\n * Returns the participant identified by the given sessionId.\n * @param sessionId – The participant's session_id or \"local\".\n */\nexport const useParticipant = (\n  sessionId: string,\n  { onParticipantLeft, onParticipantUpdated }: UseParticipantArgs = {}\n) => {\n  const participant = useRecoilValue(participantState(sessionId));\n\n  useThrottledDailyEvent(\n    'participant-updated',\n    useCallback(\n      (evts: DailyEventObjectParticipant[]) => {\n        const filteredEvts = evts.filter(\n          (ev) => ev.participant.session_id === sessionId\n        );\n        if (!filteredEvts.length) return;\n        filteredEvts.forEach((ev) => {\n          setTimeout(() => onParticipantUpdated?.(ev), 0);\n        });\n      },\n      [onParticipantUpdated, sessionId]\n    )\n  );\n\n  useThrottledDailyEvent(\n    'participant-left',\n    useCallback(\n      (evts: DailyEventObjectParticipant[]) => {\n        const filteredEvts = evts.filter(\n          (ev) => ev.participant.session_id === sessionId\n        );\n        if (!filteredEvts.length) return;\n        // Last event is sufficient to pass the information\n        const ev = evts[evts.length - 1];\n        setTimeout(() => onParticipantLeft?.(ev), 0);\n      },\n      [onParticipantLeft, sessionId]\n    )\n  );\n\n  return participant;\n};\n","import { DailyEventObjectActiveSpeakerChange } from '@daily-co/daily-js';\nimport { useEffect, useState } from 'react';\nimport { atom, useRecoilCallback, useRecoilValue } from 'recoil';\n\nimport { useDaily } from './useDaily';\nimport { useDailyEvent } from './useDailyEvent';\nimport { useParticipant } from './useParticipant';\n\ninterface UseActiveParticipantArgs {\n  /**\n   * If set to true, useActiveParticipant will never return the local participant.\n   */\n  ignoreLocal?: boolean;\n  /**\n   * Optional event callback for [active-speaker-change](https://docs.daily.co/reference/daily-js/events/meeting-events#active-speaker-change) event listener.\n   */\n  onActiveSpeakerChange?(ev: DailyEventObjectActiveSpeakerChange): void;\n}\n\n/**\n * Stores the most recent peerId as reported from [active-speaker-change](https://docs.daily.co/reference/daily-js/events/meeting-events#active-speaker-change) event.\n */\nconst activeIdState = atom({\n  key: 'active-id',\n  default: '',\n});\n\n/**\n * Returns the most recent participant mentioned in an [active-speaker-change](https://docs.daily.co/reference/daily-js/events/meeting-events#active-speaker-change) event.\n */\nexport const useActiveParticipant = ({\n  ignoreLocal = false,\n  onActiveSpeakerChange,\n}: UseActiveParticipantArgs = {}) => {\n  const daily = useDaily();\n  const recentActiveId = useRecoilValue(activeIdState);\n  const [activeId, setActiveId] = useState('');\n  const activeParticipant = useParticipant(activeId);\n\n  useEffect(() => {\n    if (!daily) return;\n    const local = daily?.participants()?.local;\n    if (ignoreLocal && recentActiveId === local?.session_id) return;\n    setActiveId(recentActiveId);\n  }, [daily, ignoreLocal, recentActiveId]);\n\n  useDailyEvent(\n    'active-speaker-change',\n    useRecoilCallback(\n      ({ set }) =>\n        (ev: DailyEventObjectActiveSpeakerChange) => {\n          set(activeIdState, ev.activeSpeaker.peerId);\n          setTimeout(() => onActiveSpeakerChange?.(ev), 0);\n        },\n      [onActiveSpeakerChange]\n    )\n  );\n\n  return activeParticipant;\n};\n","import {\n  DailyEventObjectParticipant,\n  DailyEventObjectParticipants,\n  DailyParticipant,\n  DailyTrackState,\n} from '@daily-co/daily-js';\nimport { useEffect, useMemo } from 'react';\nimport { atomFamily, useRecoilCallback, useRecoilValue } from 'recoil';\n\nimport { useDaily } from './useDaily';\nimport { useDailyEvent } from './useDailyEvent';\nimport { useThrottledDailyEvent } from './useThrottledDailyEvent';\n\ntype MediaType = keyof DailyParticipant['tracks'];\n\n// TODO: Handle optional tracks better\nconst mediaTrackState = atomFamily<DailyTrackState | undefined, string>({\n  key: 'media-track',\n  default: {\n    state: 'loading',\n    subscribed: false,\n  },\n});\n\nexport interface MediaTrackState extends DailyTrackState {\n  isOff: boolean;\n}\n\n/**\n * Returns a participant's track and state, based on the given MediaType.\n *\n * Equivalent to daily.participants()[participantId].tracks[type].\n *\n * @param participantId The participant's session_id.\n * @param type The track type. Default: \"video\"\n */\nexport const useMediaTrack = (\n  participantId: string,\n  type: MediaType = 'video'\n): MediaTrackState => {\n  const daily = useDaily();\n  const key = useMemo(() => `${participantId}-${type}`, [participantId, type]);\n  const trackState = useRecoilValue(mediaTrackState(key));\n\n  const handleNewParticipantState = useRecoilCallback(\n    ({ transact_UNSTABLE }) =>\n      (evts: DailyEventObjectParticipant[]) => {\n        const filteredEvts = evts.filter(\n          (ev) => ev.participant.session_id === participantId\n        );\n        if (!filteredEvts.length) return;\n        transact_UNSTABLE(({ reset, set }) => {\n          filteredEvts.forEach((ev) => {\n            switch (ev.action) {\n              case 'participant-joined':\n              case 'participant-updated':\n                set(mediaTrackState(key), ev.participant.tracks[type]);\n                break;\n              case 'participant-left':\n                reset(mediaTrackState(key));\n                break;\n            }\n          });\n        });\n      },\n    [key, participantId, type]\n  );\n\n  useThrottledDailyEvent('participant-joined', handleNewParticipantState);\n  useThrottledDailyEvent('participant-updated', handleNewParticipantState);\n  useThrottledDailyEvent('participant-left', handleNewParticipantState);\n\n  useDailyEvent(\n    'joined-meeting',\n    useRecoilCallback(\n      ({ set }) =>\n        (ev: DailyEventObjectParticipants) => {\n          set(mediaTrackState(key), ev.participants.local.tracks[type]);\n        },\n      [key, type]\n    )\n  );\n\n  const setInitialState = useRecoilCallback(\n    ({ set }) =>\n      (initialState: DailyTrackState | null) => {\n        if (!initialState) return;\n        set(mediaTrackState(key), initialState);\n      },\n    [key]\n  );\n  useEffect(() => {\n    if (!daily) return;\n    const participants = daily?.participants();\n    if (!participants) return;\n    const participant = Object.values(participants).find(\n      (p) => p.session_id === participantId\n    );\n    if (!participant) return;\n    setInitialState(participant.tracks?.[type] ?? null);\n  }, [daily, participantId, setInitialState, type]);\n\n  if (!trackState)\n    return {\n      isOff: true,\n      persistentTrack: undefined,\n      state: 'off',\n      subscribed: false,\n    };\n\n  return {\n    ...trackState,\n    isOff: trackState.state === 'blocked' || trackState.state === 'off',\n  };\n};\n","import {\n  DailyEventObjectCameraError,\n  DailyEventObjectFatalError,\n  DailyEventObjectParticipant,\n} from '@daily-co/daily-js';\nimport { useCallback } from 'react';\nimport { atom, useRecoilCallback, useRecoilValue } from 'recoil';\n\nimport { useDaily } from './useDaily';\nimport { useDailyEvent } from './useDailyEvent';\n\ntype GeneralState =\n  | 'pending'\n  | 'not-supported'\n  | 'granted'\n  | 'blocked'\n  | 'in-use'\n  | 'not-found';\n\ntype DeviceState = 'granted' | 'in-use';\nexport interface StatefulDevice {\n  device: MediaDeviceInfo;\n  selected: boolean;\n  state: DeviceState;\n}\n\nconst generalCameraState = atom<GeneralState>({\n  key: 'general-camera-state',\n  default: 'pending',\n});\nconst generalMicrophoneState = atom<GeneralState>({\n  key: 'general-microphone-state',\n  default: 'pending',\n});\nconst cameraDevicesState = atom<StatefulDevice[]>({\n  key: 'camera-devices',\n  default: [],\n});\nconst microphoneDevicesState = atom<StatefulDevice[]>({\n  key: 'microphone-devices',\n  default: [],\n});\nconst speakerDevicesState = atom<StatefulDevice[]>({\n  key: 'speaker-devices',\n  default: [],\n});\n\n/**\n * This hook allows access to information about the user's devices and their state.\n */\nexport const useDevices = () => {\n  const daily = useDaily();\n\n  const camState = useRecoilValue(generalCameraState);\n  const micState = useRecoilValue(generalMicrophoneState);\n  const camDevices = useRecoilValue(cameraDevicesState);\n  const micDevices = useRecoilValue(microphoneDevicesState);\n  const speakerDevices = useRecoilValue(speakerDevicesState);\n\n  /**\n   * Refreshes list of available devices using enumerateDevices.\n   * Previous device states are kept in place, otherwise states are initialized as 'granted'.\n   */\n  const refreshDevices = useRecoilCallback(\n    ({ transact_UNSTABLE }) =>\n      async () => {\n        /**\n         * Check for legacy browsers.\n         */\n        if (\n          typeof navigator?.mediaDevices?.getUserMedia === 'undefined' ||\n          typeof navigator?.mediaDevices?.enumerateDevices === 'undefined'\n        ) {\n          transact_UNSTABLE(({ set }) => {\n            set(generalCameraState, 'not-supported');\n            set(generalMicrophoneState, 'not-supported');\n          });\n          return;\n        }\n\n        if (!daily) return;\n\n        try {\n          const { devices } = await daily.enumerateDevices();\n          /**\n           * Filter out \"empty\" devices for when device access has not been granted (yet).\n           */\n          const cams = devices.filter(\n            (d) => d.kind === 'videoinput' && d.deviceId !== ''\n          );\n          const mics = devices.filter(\n            (d) => d.kind === 'audioinput' && d.deviceId !== ''\n          );\n          const speakers = devices.filter(\n            (d) => d.kind === 'audiooutput' && d.deviceId !== ''\n          );\n          const { camera, mic, speaker } = await daily.getInputDevices();\n\n          const mapDevice = (\n            device: {} | MediaDeviceInfo,\n            d: MediaDeviceInfo,\n            prevDevices: StatefulDevice[]\n          ) => ({\n            device: d,\n            selected: 'deviceId' in device && d.deviceId === device.deviceId,\n            state:\n              prevDevices.find((p) => p.device.deviceId === d.deviceId)\n                ?.state ?? 'granted',\n          });\n          const sortDeviceByLabel = (a: StatefulDevice, b: StatefulDevice) => {\n            if (a.device.deviceId === 'default') return -1;\n            if (b.device.deviceId === 'default') return 1;\n            if (a.device.label < b.device.label) return -1;\n            if (a.device.label > b.device.label) return 1;\n            return 0;\n          };\n\n          transact_UNSTABLE(({ set }) => {\n            set(cameraDevicesState, (prevCams) =>\n              cams\n                .filter(Boolean)\n                .map<StatefulDevice>((d) => mapDevice(camera, d, prevCams))\n                .sort(sortDeviceByLabel)\n            );\n            set(microphoneDevicesState, (prevMics) =>\n              mics\n                .filter(Boolean)\n                .map<StatefulDevice>((d) => mapDevice(mic, d, prevMics))\n                .sort(sortDeviceByLabel)\n            );\n            set(speakerDevicesState, (prevSpeakers) =>\n              speakers\n                .filter(Boolean)\n                .map<StatefulDevice>((d) => mapDevice(speaker, d, prevSpeakers))\n                .sort(sortDeviceByLabel)\n            );\n          });\n        } catch (e) {\n          transact_UNSTABLE(({ set }) => {\n            set(generalCameraState, 'not-supported');\n            set(generalMicrophoneState, 'not-supported');\n          });\n        }\n      },\n    [daily]\n  );\n\n  /**\n   * Updates general and specific device states, based on blocked status.\n   */\n  const updateDeviceStates = useRecoilCallback(\n    ({ set, snapshot, transact_UNSTABLE }) =>\n      async () => {\n        if (!daily) return;\n\n        const currentCamState = await snapshot.getPromise(generalCameraState);\n        const currentMicState = await snapshot.getPromise(\n          generalMicrophoneState\n        );\n\n        const { tracks } = daily.participants().local;\n\n        const awaitingCamAccess =\n          currentCamState === 'pending' && tracks.video.state === 'interrupted';\n        const awaitingMicAccess =\n          currentMicState === 'pending' && tracks.audio.state === 'interrupted';\n\n        if (tracks.audio?.blocked?.byDeviceInUse) {\n          transact_UNSTABLE(({ set }) => {\n            set(generalMicrophoneState, 'in-use');\n            set(microphoneDevicesState, (mics) =>\n              mics.map<StatefulDevice>((m) =>\n                m.selected ? { ...m, state: 'in-use' } : m\n              )\n            );\n          });\n        } else if (tracks.audio?.blocked?.byDeviceMissing) {\n          set(generalMicrophoneState, 'not-found');\n        } else if (tracks.audio?.blocked?.byPermissions) {\n          set(generalMicrophoneState, 'blocked');\n        } else if (!awaitingMicAccess) {\n          transact_UNSTABLE(({ set }) => {\n            set(generalMicrophoneState, 'granted');\n            set(microphoneDevicesState, (mics) =>\n              mics.map<StatefulDevice>((m) =>\n                m.selected ? { ...m, state: 'granted' } : m\n              )\n            );\n          });\n        }\n\n        if (tracks.video?.blocked?.byDeviceInUse) {\n          transact_UNSTABLE(({ set }) => {\n            set(generalCameraState, 'in-use');\n            set(cameraDevicesState, (cams) =>\n              cams.map<StatefulDevice>((m) =>\n                m.selected ? { ...m, state: 'in-use' } : m\n              )\n            );\n          });\n        } else if (tracks.video?.blocked?.byDeviceMissing) {\n          set(generalCameraState, 'not-found');\n        } else if (tracks.video?.blocked?.byPermissions) {\n          set(generalCameraState, 'blocked');\n        } else if (!awaitingCamAccess) {\n          transact_UNSTABLE(({ set }) => {\n            set(generalCameraState, 'granted');\n            set(cameraDevicesState, (cams) =>\n              cams.map<StatefulDevice>((m) =>\n                m.selected ? { ...m, state: 'granted' } : m\n              )\n            );\n          });\n        }\n        refreshDevices();\n      },\n    [daily, refreshDevices]\n  );\n\n  useDailyEvent(\n    'participant-updated',\n    useCallback(\n      (ev: DailyEventObjectParticipant) => {\n        if (!ev.participant.local) return;\n        updateDeviceStates();\n      },\n      [updateDeviceStates]\n    )\n  );\n\n  useDailyEvent('available-devices-updated', refreshDevices);\n\n  useDailyEvent(\n    'camera-error',\n    useRecoilCallback(\n      ({ set, transact_UNSTABLE }) =>\n        ({\n          error,\n          errorMsg: { audioOk, errorMsg, videoOk },\n        }: DailyEventObjectCameraError) => {\n          switch (error?.type) {\n            case 'cam-in-use':\n              set(generalCameraState, 'in-use');\n              break;\n            case 'mic-in-use':\n              set(generalMicrophoneState, 'in-use');\n              break;\n            case 'cam-mic-in-use':\n              transact_UNSTABLE(({ set }) => {\n                set(generalCameraState, 'in-use');\n                set(generalMicrophoneState, 'in-use');\n              });\n              break;\n            default:\n              switch (errorMsg) {\n                case 'devices error':\n                  transact_UNSTABLE(({ set }) => {\n                    if (!videoOk) set(generalCameraState, 'not-found');\n                    if (!audioOk) set(generalMicrophoneState, 'not-found');\n                  });\n                  break;\n                case 'not allowed': {\n                  transact_UNSTABLE(({ set }) => {\n                    set(generalCameraState, 'blocked');\n                    set(generalMicrophoneState, 'blocked');\n                  });\n                  updateDeviceStates();\n                  break;\n                }\n              }\n              break;\n          }\n        },\n      [updateDeviceStates]\n    )\n  );\n\n  useDailyEvent(\n    'error',\n    useRecoilCallback(\n      ({ transact_UNSTABLE }) =>\n        ({ errorMsg }: DailyEventObjectFatalError) => {\n          switch (errorMsg) {\n            case 'not allowed': {\n              transact_UNSTABLE(({ set }) => {\n                set(generalCameraState, 'blocked');\n                set(generalMicrophoneState, 'blocked');\n              });\n              updateDeviceStates();\n              break;\n            }\n          }\n        },\n      [updateDeviceStates]\n    )\n  );\n\n  /**\n   * Update all device state, when camera is started.\n   */\n  useDailyEvent(\n    'started-camera',\n    useRecoilCallback(\n      ({ transact_UNSTABLE }) =>\n        () => {\n          transact_UNSTABLE(({ set }) => {\n            set(generalCameraState, 'granted');\n            set(generalMicrophoneState, 'granted');\n          });\n          updateDeviceStates();\n        },\n      [updateDeviceStates]\n    )\n  );\n\n  /**\n   * Sets video input device to given deviceId.\n   */\n  const setCamera = useCallback(\n    async (deviceId: string) => {\n      await daily?.setInputDevicesAsync({\n        audioDeviceId: null,\n        videoDeviceId: deviceId,\n      });\n      refreshDevices();\n    },\n    [daily, refreshDevices]\n  );\n\n  /**\n   * Sets audio input device to given deviceId.\n   */\n  const setMicrophone = useCallback(\n    async (deviceId: string) => {\n      await daily?.setInputDevicesAsync({\n        audioDeviceId: deviceId,\n        videoDeviceId: null,\n      });\n      refreshDevices();\n    },\n    [daily, refreshDevices]\n  );\n\n  /**\n   * Sets audio output device to given deviceId.\n   */\n  const setSpeaker = useCallback(\n    async (deviceId: string) => {\n      await daily?.setOutputDeviceAsync({\n        outputDeviceId: deviceId,\n      });\n      refreshDevices();\n    },\n    [daily, refreshDevices]\n  );\n\n  return {\n    /**\n     * A list of the user's camera (videoinput) devices. See [MediaDeviceInfo](https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo) for more info.\n     */\n    cameras: camDevices,\n    /**\n     * The general state for camera access.\n     */\n    camState,\n    /**\n     * Indicates that there's an issue with camera devices.\n     */\n    hasCamError: ['blocked', 'in-use', 'not-found'].includes(camState),\n    /**\n     * Indicates that there's an issue with microphone devices.\n     */\n    hasMicError: ['blocked', 'in-use', 'not-found'].includes(micState),\n    /**\n     * A list of the user's microphone (audioinput) devices. See [MediaDeviceInfo](https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo) for more info.\n     */\n    microphones: micDevices,\n    /**\n     * The general state for microphone access.\n     */\n    micState,\n    /**\n     * Refreshes the list of devices using [enumerateDevices](https://docs.daily.co/reference/daily-js/instance-methods/enumerate-devices).\n     */\n    refreshDevices,\n    /**\n     * Allows to switch to the camera with the specified deviceId. Calls [setInputDevicesAsync](https://docs.daily.co/reference/daily-js/instance-methods/set-input-devices-async) internally.\n     */\n    setCamera,\n    /**\n     * Allows to switch to the microphone with the specified deviceId. Calls [setInputDevicesAsync](https://docs.daily.co/reference/daily-js/instance-methods/set-input-devices-async) internally.\n     */\n    setMicrophone,\n    /**\n     * Allows to switch to the speaker with the specified deviceId. Calls [setOutputDevice](https://docs.daily.co/reference/daily-js/instance-methods/set-output-device) internally.\n     */\n    setSpeaker,\n    /**\n     * A list of the user's speaker (audiooutput) devices. See [MediaDeviceInfo](https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo) for more info.\n     */\n    speakers: speakerDevices,\n  };\n};\n","import {\n  DailyEventObjectInputSettingsUpdated,\n  DailyEventObjectNonFatalError,\n  DailyInputSettings,\n} from '@daily-co/daily-js';\nimport { useCallback, useEffect } from 'react';\nimport { atom, useRecoilCallback, useRecoilValue } from 'recoil';\n\nimport { useDaily } from './useDaily';\nimport { useDailyEvent } from './useDailyEvent';\n\ninterface UseInputSettingsArgs {\n  onError?(ev: DailyEventObjectNonFatalError): void;\n  onInputSettingsUpdated?(ev: DailyEventObjectInputSettingsUpdated): void;\n}\n\nconst inputSettingsState = atom<DailyInputSettings | null>({\n  key: 'input-settings',\n  default: null,\n});\nconst errorState = atom<string | null>({\n  key: 'input-settings-error',\n  default: null,\n});\n\nexport const useInputSettings = ({\n  onError,\n  onInputSettingsUpdated,\n}: UseInputSettingsArgs = {}) => {\n  const inputSettings = useRecoilValue(inputSettingsState);\n  const errorMsg = useRecoilValue(errorState);\n  const daily = useDaily();\n\n  const updateInputSettingsState = useRecoilCallback(\n    ({ set }) =>\n      (inputSettings: DailyInputSettings) => {\n        set(inputSettingsState, inputSettings);\n      },\n    []\n  );\n\n  useEffect(() => {\n    if (!daily) return;\n    daily.getInputSettings().then(updateInputSettingsState);\n  }, [daily, updateInputSettingsState]);\n\n  /**\n   * Handle 'input-settings-updated' events.\n   */\n  useDailyEvent(\n    'input-settings-updated',\n    useCallback(\n      (ev: DailyEventObjectInputSettingsUpdated) => {\n        updateInputSettingsState(ev.inputSettings);\n        setTimeout(() => onInputSettingsUpdated?.(ev), 0);\n      },\n      [onInputSettingsUpdated, updateInputSettingsState]\n    )\n  );\n\n  /**\n   * Handle nonfatal errors of type 'input-settings-error'.\n   */\n  useDailyEvent(\n    'nonfatal-error',\n    useRecoilCallback(\n      ({ set }) =>\n        (ev: DailyEventObjectNonFatalError) => {\n          if (ev.type !== 'input-settings-error') return;\n          set(errorState, ev.errorMsg);\n          setTimeout(() => onError?.(ev), 0);\n        },\n      [onError]\n    )\n  );\n\n  /**\n   * Calls daily.updateInputSettings internally.\n   */\n  const updateInputSettings = useCallback(\n    (inputSettings: DailyInputSettings) => {\n      daily?.updateInputSettings(inputSettings);\n    },\n    [daily]\n  );\n\n  return {\n    errorMsg,\n    inputSettings,\n    updateInputSettings,\n  };\n};\n","import {\n  DailyEventObject,\n  DailyEventObjectGenericError,\n  DailyEventObjectLiveStreamingStarted,\n  DailyLiveStreamingOptions,\n  DailyStreamingLayoutConfig,\n} from '@daily-co/daily-js';\nimport { useCallback } from 'react';\nimport { atom, useRecoilCallback, useRecoilValue } from 'recoil';\n\nimport { useDaily } from './useDaily';\nimport { useDailyEvent } from './useDailyEvent';\n\ninterface UseLiveStreamingArgs {\n  onLiveStreamingStarted?(ev: DailyEventObjectLiveStreamingStarted): void;\n  onLiveStreamingStopped?(ev: DailyEventObject): void;\n  onLiveStreamingError?(ev: DailyEventObjectGenericError): void;\n}\n\ninterface LiveStreamingState {\n  errorMsg?: string;\n  isLiveStreaming: boolean;\n  layout?: DailyStreamingLayoutConfig;\n}\n\nconst liveStreamingState = atom<LiveStreamingState>({\n  key: 'live-streaming',\n  default: {\n    errorMsg: undefined,\n    isLiveStreaming: false,\n    layout: undefined,\n  },\n});\n\n/**\n * This hook allows to setup [live streaming events](https://docs.daily.co/reference/daily-js/events/live-streaming-events),\n * as well as starting, stopping and updating live streams.\n *\n * Returns the current live streaming state, incl. the current layout and potential errorMsg.\n */\nexport const useLiveStreaming = ({\n  onLiveStreamingError,\n  onLiveStreamingStarted,\n  onLiveStreamingStopped,\n}: UseLiveStreamingArgs = {}) => {\n  const daily = useDaily();\n  const state = useRecoilValue(liveStreamingState);\n\n  useDailyEvent(\n    'live-streaming-started',\n    useRecoilCallback(\n      ({ set }) =>\n        (ev: DailyEventObjectLiveStreamingStarted) => {\n          set(liveStreamingState, {\n            isLiveStreaming: true,\n            layout: ev?.layout,\n          });\n          setTimeout(() => onLiveStreamingStarted?.(ev), 0);\n        },\n      [onLiveStreamingStarted]\n    )\n  );\n\n  useDailyEvent(\n    'live-streaming-stopped',\n    useRecoilCallback(\n      ({ set }) =>\n        (ev: DailyEventObject) => {\n          set(liveStreamingState, (prevState) => ({\n            ...prevState,\n            isLiveStreaming: false,\n            layout: undefined,\n          }));\n          setTimeout(() => onLiveStreamingStopped?.(ev), 0);\n        },\n      [onLiveStreamingStopped]\n    )\n  );\n\n  useDailyEvent(\n    'live-streaming-error',\n    useRecoilCallback(\n      ({ set }) =>\n        (ev: DailyEventObjectGenericError) => {\n          set(liveStreamingState, (prevState) => ({\n            ...prevState,\n            errorMsg: ev.errorMsg,\n          }));\n          setTimeout(() => onLiveStreamingError?.(ev), 0);\n        },\n      [onLiveStreamingError]\n    )\n  );\n\n  const startLiveStreaming = useCallback(\n    (options: DailyLiveStreamingOptions) => {\n      if (!daily) return;\n      daily.startLiveStreaming(options);\n    },\n    [daily]\n  );\n\n  const stopLiveStreaming = useCallback(() => {\n    if (!daily) return;\n    daily.stopLiveStreaming();\n  }, [daily]);\n\n  const updateLiveStreaming = useCallback(\n    ({ layout }: { layout: DailyStreamingLayoutConfig | undefined }) => {\n      if (!daily) return;\n      daily.updateLiveStreaming({\n        layout,\n      });\n    },\n    [daily]\n  );\n\n  return {\n    ...state,\n    startLiveStreaming,\n    stopLiveStreaming,\n    updateLiveStreaming,\n  };\n};\n","import { useRecoilValue } from 'recoil';\n\nimport { localIdState } from '../DailyParticipants';\n\n/**\n * Returns the local participant's session_id or null,\n * if the local participant doesn't exist.\n */\nexport const useLocalSessionId = () => {\n  return useRecoilValue(localIdState) || null;\n};\n","import {\n  DailyEventObjectNetworkConnectionEvent,\n  DailyEventObjectNetworkQualityEvent,\n  DailyNetworkStats,\n  DailyNetworkTopology,\n} from '@daily-co/daily-js';\nimport { useCallback } from 'react';\nimport { atom, useRecoilCallback, useRecoilValue } from 'recoil';\n\nimport { useDaily } from './useDaily';\nimport { useDailyEvent } from './useDailyEvent';\n\ninterface UseNetworkArgs {\n  onNetworkConnection?(ev: DailyEventObjectNetworkConnectionEvent): void;\n  onNetworkQualityChange?(ev: DailyEventObjectNetworkQualityEvent): void;\n}\n\nconst topologyState = atom<DailyNetworkTopology>({\n  key: 'topology',\n  default: 'peer',\n});\nconst networkQualityState = atom<DailyNetworkStats['quality']>({\n  key: 'networkQuality',\n  default: 100,\n});\nconst networkThresholdState = atom<DailyNetworkStats['threshold']>({\n  key: 'networkThreshold',\n  default: 'good',\n});\n\n/**\n * Returns current information about network quality and topology.\n * Allows to setup event listeners for daily's [network events](https://docs.daily.co/reference/daily-js/events/network-events).\n */\nexport const useNetwork = ({\n  onNetworkConnection,\n  onNetworkQualityChange,\n}: UseNetworkArgs = {}) => {\n  const daily = useDaily();\n\n  const topology = useRecoilValue(topologyState);\n  const quality = useRecoilValue(networkQualityState);\n  const threshold = useRecoilValue(networkThresholdState);\n\n  const handleNetworkConnection = useRecoilCallback(\n    ({ transact_UNSTABLE }) =>\n      (ev: DailyEventObjectNetworkConnectionEvent) => {\n        transact_UNSTABLE(({ set }) => {\n          switch (ev.event) {\n            case 'connected':\n              if (ev.type === 'peer-to-peer') set(topologyState, 'peer');\n              if (ev.type === 'sfu') set(topologyState, 'sfu');\n              break;\n          }\n        });\n        setTimeout(() => onNetworkConnection?.(ev), 0);\n      },\n    [onNetworkConnection]\n  );\n\n  const handleNetworkQualityChange = useRecoilCallback(\n    ({ transact_UNSTABLE }) =>\n      (ev: DailyEventObjectNetworkQualityEvent) => {\n        transact_UNSTABLE(({ set }) => {\n          set(networkQualityState, (prevQuality) =>\n            prevQuality !== ev.quality ? ev.quality : prevQuality\n          );\n          set(networkThresholdState, (prevThreshold) =>\n            prevThreshold !== ev.threshold ? ev.threshold : prevThreshold\n          );\n        });\n        setTimeout(() => onNetworkQualityChange?.(ev), 0);\n      },\n    [onNetworkQualityChange]\n  );\n\n  useDailyEvent('network-connection', handleNetworkConnection);\n  useDailyEvent('network-quality-change', handleNetworkQualityChange);\n\n  const getStats = useCallback(async () => {\n    const newStats = await daily?.getNetworkStats();\n    return newStats?.stats;\n  }, [daily]);\n\n  return {\n    getStats,\n    quality,\n    threshold,\n    topology,\n  };\n};\n","import {\n  DailyEventObjectActiveSpeakerChange,\n  DailyEventObjectParticipant,\n  DailyParticipant,\n} from '@daily-co/daily-js';\nimport { useCallback, useMemo } from 'react';\nimport { useRecoilValue } from 'recoil';\n\nimport { participantsState } from '../DailyParticipants';\nimport { useThrottledDailyEvent } from './useThrottledDailyEvent';\n\ntype FilterParticipantsFunction = (\n  p: DailyParticipant,\n  index: number,\n  arr: DailyParticipant[]\n) => boolean;\ntype FilterParticipants =\n  | 'local'\n  | 'remote'\n  | 'owner'\n  | 'record'\n  | 'screen'\n  | FilterParticipantsFunction;\n\ntype SortParticipantsFunction = (\n  a: DailyParticipant,\n  b: DailyParticipant\n) => 1 | -1 | 0;\ntype SortParticipants =\n  | 'joined_at'\n  | 'session_id'\n  | 'user_id'\n  | 'user_name'\n  | SortParticipantsFunction;\n\nconst defaultFilter: FilterParticipants = Boolean;\nconst defaultSort: SortParticipants = () => 0;\n\ninterface UseParticipantIdsArgs {\n  filter?: FilterParticipants;\n  onActiveSpeakerChange?(ev: DailyEventObjectActiveSpeakerChange): void;\n  onParticipantJoined?(ev: DailyEventObjectParticipant): void;\n  onParticipantLeft?(ev: DailyEventObjectParticipant): void;\n  onParticipantUpdated?(ev: DailyEventObjectParticipant): void;\n  sort?: SortParticipants;\n}\n\n/**\n * Returns a list of participant ids (= session_id).\n * The list can optionally be filtered and sorted, using the filter and sort options.\n */\nexport const useParticipantIds = (\n  {\n    filter = defaultFilter,\n    onActiveSpeakerChange,\n    onParticipantJoined,\n    onParticipantLeft,\n    onParticipantUpdated,\n    sort = defaultSort,\n  }: UseParticipantIdsArgs = {\n    filter: defaultFilter,\n    sort: defaultSort,\n  }\n) => {\n  const allParticipants = useRecoilValue(participantsState);\n\n  const sortedIds = useMemo(() => {\n    let filterFn = defaultFilter;\n    switch (filter) {\n      case 'local':\n        filterFn = (p) => p.local;\n        break;\n      case 'owner':\n        filterFn = (p) => p.owner;\n        break;\n      case 'record':\n        filterFn = (p) => p.record;\n        break;\n      case 'remote':\n        filterFn = (p) => !p.local;\n        break;\n      case 'screen':\n        filterFn = (p) => p.screen;\n        break;\n      default:\n        filterFn = filter;\n    }\n    let sortFn: SortParticipantsFunction;\n    switch (sort) {\n      case 'joined_at':\n      case 'session_id':\n      case 'user_id':\n      case 'user_name':\n        sortFn = (a, b) => {\n          if (a[sort] < b[sort]) return -1;\n          if (a[sort] > b[sort]) return 1;\n          return 0;\n        };\n        break;\n      default:\n        sortFn = sort;\n        break;\n    }\n    return allParticipants\n      .filter(filterFn)\n      .sort(sortFn)\n      .map((p) => p.session_id)\n      .filter(Boolean);\n  }, [allParticipants, filter, sort]);\n\n  useThrottledDailyEvent(\n    'participant-joined',\n    useCallback(\n      (evts: DailyEventObjectParticipant[]) => {\n        if (!evts.length) return;\n        evts.forEach((ev) => setTimeout(() => onParticipantJoined?.(ev), 0));\n      },\n      [onParticipantJoined]\n    )\n  );\n\n  useThrottledDailyEvent(\n    'participant-updated',\n    useCallback(\n      (evts: DailyEventObjectParticipant[]) => {\n        if (!evts.length) return;\n        evts.forEach((ev) => setTimeout(() => onParticipantUpdated?.(ev), 0));\n      },\n      [onParticipantUpdated]\n    )\n  );\n\n  useThrottledDailyEvent(\n    'active-speaker-change',\n    useCallback(\n      async (evts: DailyEventObjectActiveSpeakerChange[]) => {\n        if (!evts.length) return;\n        evts.forEach((ev) => setTimeout(() => onActiveSpeakerChange?.(ev), 0));\n      },\n      [onActiveSpeakerChange]\n    )\n  );\n\n  useThrottledDailyEvent(\n    'participant-left',\n    useCallback(\n      (evts: DailyEventObjectParticipant[]) => {\n        if (!evts.length) return;\n        evts.forEach((ev) => setTimeout(() => onParticipantLeft?.(ev), 0));\n      },\n      [onParticipantLeft]\n    )\n  );\n\n  return sortedIds;\n};\n","import {\n  DailyEventObjectReceiveSettingsUpdated,\n  DailyReceiveSettings,\n  DailySingleParticipantReceiveSettings,\n} from '@daily-co/daily-js';\nimport { useCallback } from 'react';\nimport { atomFamily, useRecoilCallback, useRecoilValue } from 'recoil';\n\nimport { useDaily } from './useDaily';\nimport { useDailyEvent } from './useDailyEvent';\n\nconst participantReceiveSettingsState = atomFamily<\n  DailySingleParticipantReceiveSettings,\n  string\n>({\n  key: 'participant-receive-settings',\n  default: {},\n});\n\ninterface UseReceiveSettingsArgs {\n  id?: string;\n  onReceiveSettingsUpdated?(ev: DailyEventObjectReceiveSettingsUpdated): void;\n}\n\n/**\n * Allows to read and set receiveSettings.\n * In case receiveSettings for participant specified by id are empty, not set or 'inherit',\n * base receiveSettings will be returned.\n * In case meeting is not in joined state, calls to updateReceiveSettings will be silently ignored.\n */\nexport const useReceiveSettings = ({\n  id = 'base',\n  onReceiveSettingsUpdated,\n}: UseReceiveSettingsArgs = {}) => {\n  const baseSettings = useRecoilValue(participantReceiveSettingsState('base'));\n  const receiveSettings = useRecoilValue(participantReceiveSettingsState(id));\n  const daily = useDaily();\n\n  useDailyEvent(\n    'receive-settings-updated',\n    useRecoilCallback(\n      ({ transact_UNSTABLE }) =>\n        (ev: DailyEventObjectReceiveSettingsUpdated) => {\n          transact_UNSTABLE(({ reset, set }) => {\n            const { ...ids } = ev.receiveSettings;\n            for (let [id, settings] of Object.entries(ids)) {\n              set(participantReceiveSettingsState(id), settings);\n            }\n            if (!(id in ids)) {\n              reset(participantReceiveSettingsState(id));\n            }\n          });\n          setTimeout(() => onReceiveSettingsUpdated?.(ev), 0);\n        },\n      [id, onReceiveSettingsUpdated]\n    )\n  );\n\n  const updateReceiveSettings = useCallback(\n    (receiveSettings: DailyReceiveSettings) => {\n      if (!(daily && daily.meetingState() === 'joined-meeting')) {\n        return;\n      }\n      daily?.updateReceiveSettings?.(receiveSettings);\n    },\n    [daily]\n  );\n\n  return {\n    receiveSettings:\n      id === 'base' || Object.keys(receiveSettings).length === 0\n        ? baseSettings\n        : receiveSettings,\n    updateReceiveSettings,\n  };\n};\n","import {\n  DailyEventObjectNoPayload,\n  DailyEventObjectRecordingData,\n  DailyEventObjectRecordingStarted,\n  DailyStreamingLayoutConfig,\n  DailyStreamingOptions,\n} from '@daily-co/daily-js';\nimport { useCallback, useEffect } from 'react';\nimport {\n  atom,\n  useRecoilCallback,\n  useRecoilValue,\n  useSetRecoilState,\n} from 'recoil';\n\nimport { useDaily } from './useDaily';\nimport { useDailyEvent } from './useDailyEvent';\nimport { useLocalSessionId } from './useLocalSessionId';\nimport { useParticipantIds } from './useParticipantIds';\n\ninterface UseRecordingArgs {\n  onRecordingData?(ev: DailyEventObjectRecordingData): void;\n  onRecordingError?(ev: DailyEventObjectNoPayload): void;\n  onRecordingStarted?(ev: DailyEventObjectRecordingStarted): void;\n  onRecordingStopped?(ev: DailyEventObjectNoPayload): void;\n}\n\ninterface RecordingState {\n  /**\n   * Determines wether an error occurred during the last recording attempt.\n   */\n  error?: boolean;\n  /**\n   * Determines wether the local participant is being recorded, based on the recording settings.\n   */\n  isLocalParticipantRecorded: boolean;\n  /**\n   * Determines wether a recording is currently running or not.\n   */\n  isRecording: boolean;\n  /**\n   * Contains the last applied cloud recording layout config.\n   */\n  layout?: DailyStreamingLayoutConfig;\n  /**\n   * Determines wether the recording is running locally.\n   * See [enable_recording](https://docs.daily.co/reference/rest-api/rooms/config#enable_recording).\n   */\n  local?: boolean;\n  /**\n   * Contains the recording id.\n   */\n  recordingId?: string;\n  /**\n   * Contains the date when the 'recording-started' event was received.\n   * This doesn't necessarily match the date the recording was actually started.\n   */\n  recordingStartedDate?: Date;\n  /**\n   * Contains the session_id of the participant who started the recording.\n   */\n  startedBy?: string;\n  /**\n   * Contains the recording type.\n   * See [enable_recording](https://docs.daily.co/reference/rest-api/rooms/config#enable_recording).\n   */\n  type?: string;\n}\n\nconst recordingState = atom<RecordingState>({\n  key: 'recording',\n  default: {\n    isLocalParticipantRecorded: false,\n    isRecording: false,\n  },\n});\n\nexport const useRecording = ({\n  onRecordingData,\n  onRecordingError,\n  onRecordingStarted,\n  onRecordingStopped,\n}: UseRecordingArgs = {}) => {\n  const daily = useDaily();\n  const state = useRecoilValue(recordingState);\n  const setState = useSetRecoilState(recordingState);\n\n  const localSessionId = useLocalSessionId();\n\n  const recordingParticipantIds = useParticipantIds({\n    filter: 'record',\n  });\n  /**\n   * Update recording state, whenever amount of recording participants changes.\n   */\n  useEffect(() => {\n    const hasRecordingParticipants = recordingParticipantIds.length > 0;\n    const isLocalParticipantRecording = recordingParticipantIds.includes(\n      localSessionId ?? 'local'\n    );\n    setState((s) => ({\n      ...s,\n      // In case type is local or not set, determine based on recording participants\n      isLocalParticipantRecorded:\n        s?.type === 'local' || !s?.type\n          ? hasRecordingParticipants\n          : s.isLocalParticipantRecorded,\n      isRecording:\n        s?.type === 'local' || !s?.type\n          ? hasRecordingParticipants\n          : s.isRecording,\n      local:\n        (s?.type === 'local' || !s?.type) && hasRecordingParticipants\n          ? isLocalParticipantRecording\n          : s?.local,\n      /**\n       * Set type in case recording participants are detected.\n       * We only set `record` on participants, when recording type is 'local'.\n       */\n      type: hasRecordingParticipants ? 'local' : s?.type,\n    }));\n  }, [localSessionId, recordingParticipantIds, setState]);\n\n  useDailyEvent(\n    'recording-started',\n    useRecoilCallback(\n      ({ set }) =>\n        (ev: DailyEventObjectRecordingStarted) => {\n          let isLocalParticipantRecorded = true;\n          switch (ev.type) {\n            case 'cloud-beta':\n            case 'cloud': {\n              if (\n                localSessionId &&\n                ev.layout?.preset === 'single-participant' &&\n                ev.layout.session_id !== localSessionId\n              ) {\n                isLocalParticipantRecorded = false;\n              }\n              break;\n            }\n          }\n          set(recordingState, {\n            error: false,\n            isLocalParticipantRecorded,\n            isRecording: true,\n            layout: ev?.layout,\n            local: ev?.local,\n            recordingId: ev?.recordingId,\n            recordingStartedDate: new Date(),\n            startedBy: ev?.startedBy,\n            type: ev?.type,\n          });\n          setTimeout(() => onRecordingStarted?.(ev), 0);\n        },\n      [localSessionId, onRecordingStarted]\n    )\n  );\n  useDailyEvent(\n    'recording-stopped',\n    useRecoilCallback(\n      ({ set }) =>\n        (ev: DailyEventObjectNoPayload) => {\n          set(recordingState, (prevState) => ({\n            ...prevState,\n            isLocalParticipantRecorded: false,\n            isRecording: false,\n          }));\n          setTimeout(() => onRecordingStopped?.(ev), 0);\n        },\n      [onRecordingStopped]\n    )\n  );\n  useDailyEvent(\n    'recording-error',\n    useRecoilCallback(\n      ({ set }) =>\n        (ev: DailyEventObjectNoPayload) => {\n          set(recordingState, (prevState) => ({\n            ...prevState,\n            error: true,\n            isLocalParticipantRecorded: false,\n            isRecording: false,\n          }));\n          setTimeout(() => onRecordingError?.(ev), 0);\n        },\n      [onRecordingError]\n    )\n  );\n  useDailyEvent(\n    'recording-data',\n    useCallback(\n      (ev: DailyEventObjectRecordingData) => {\n        onRecordingData?.(ev);\n      },\n      [onRecordingData]\n    )\n  );\n\n  /**\n   * Starts the recording with the given optional options.\n   */\n  const startRecording = useCallback(\n    (options?: DailyStreamingOptions) => {\n      if (!daily) return;\n      daily.startRecording(options);\n    },\n    [daily]\n  );\n\n  /**\n   * Stops a recording.\n   */\n  const stopRecording = useCallback(() => {\n    if (!daily) return;\n    daily.stopRecording();\n  }, [daily]);\n\n  /**\n   * Updates a running recording's layout configuration.\n   */\n  const updateRecording = useCallback(\n    (options: { layout?: DailyStreamingLayoutConfig | undefined }) => {\n      if (!daily) return;\n      daily.updateRecording(options);\n    },\n    [daily]\n  );\n\n  return {\n    ...state,\n    startRecording,\n    stopRecording,\n    updateRecording,\n  };\n};\n","import {\n  DailyEventObjectWaitingParticipant,\n  DailyWaitingParticipant,\n} from '@daily-co/daily-js';\nimport { useCallback } from 'react';\nimport {\n  atom,\n  atomFamily,\n  selector,\n  useRecoilCallback,\n  useRecoilValue,\n} from 'recoil';\n\nimport { useDaily } from './useDaily';\nimport { useDailyEvent } from './useDailyEvent';\n\ninterface UseWaitingParticipantsArgs {\n  onWaitingParticipantAdded?(ev: DailyEventObjectWaitingParticipant): void;\n  onWaitingParticipantUpdated?(ev: DailyEventObjectWaitingParticipant): void;\n  onWaitingParticipantRemoved?(ev: DailyEventObjectWaitingParticipant): void;\n}\n\nconst waitingParticipantsState = atom<string[]>({\n  key: 'waiting-participants',\n  default: [],\n});\n\nexport const waitingParticipantState = atomFamily<\n  DailyWaitingParticipant,\n  string\n>({\n  key: 'waiting-participant',\n  default: {\n    awaitingAccess: {\n      level: 'full',\n    },\n    id: '',\n    name: '',\n  },\n});\n\nexport const allWaitingParticipantsSelector = selector({\n  key: 'waitingParticipantsSelector',\n  get: ({ get }) => {\n    const ids = get(waitingParticipantsState);\n    return ids.map((id) => get(waitingParticipantState(id)));\n  },\n});\n\n/**\n * Hook to access and manage waiting participants.\n */\nexport const useWaitingParticipants = ({\n  onWaitingParticipantAdded,\n  onWaitingParticipantRemoved,\n  onWaitingParticipantUpdated,\n}: UseWaitingParticipantsArgs = {}) => {\n  const daily = useDaily();\n\n  const waitingParticipants = useRecoilValue(allWaitingParticipantsSelector);\n\n  const handleAdded = useRecoilCallback(\n    ({ transact_UNSTABLE }) =>\n      (ev: DailyEventObjectWaitingParticipant) => {\n        transact_UNSTABLE(({ set }) => {\n          set(waitingParticipantsState, (wps) => {\n            if (!wps.includes(ev.participant.id)) {\n              return [...wps, ev.participant.id];\n            }\n            return wps;\n          });\n          set(waitingParticipantState(ev.participant.id), ev.participant);\n        });\n        setTimeout(() => onWaitingParticipantAdded?.(ev), 0);\n      },\n    [onWaitingParticipantAdded]\n  );\n\n  const handleRemoved = useRecoilCallback(\n    ({ transact_UNSTABLE }) =>\n      (ev: DailyEventObjectWaitingParticipant) => {\n        transact_UNSTABLE(({ reset, set }) => {\n          set(waitingParticipantsState, (wps) =>\n            wps.filter((wp) => wp !== ev.participant.id)\n          );\n          reset(waitingParticipantState(ev.participant.id));\n        });\n        setTimeout(() => onWaitingParticipantRemoved?.(ev), 0);\n      },\n    [onWaitingParticipantRemoved]\n  );\n\n  const handleUpdated = useRecoilCallback(\n    ({ set }) =>\n      (ev: DailyEventObjectWaitingParticipant) => {\n        set(waitingParticipantState(ev.participant.id), ev.participant);\n        setTimeout(() => onWaitingParticipantUpdated?.(ev), 0);\n      },\n    [onWaitingParticipantUpdated]\n  );\n\n  useDailyEvent('waiting-participant-added', handleAdded);\n  useDailyEvent('waiting-participant-removed', handleRemoved);\n  useDailyEvent('waiting-participant-updated', handleUpdated);\n\n  const updateWaitingParticipantAccess = useCallback(\n    (id: '*' | string, grantRequestedAccess: boolean) => {\n      if (id === '*') {\n        daily?.updateWaitingParticipants({\n          '*': {\n            grantRequestedAccess,\n          },\n        });\n        return;\n      }\n      daily?.updateWaitingParticipant(id, {\n        grantRequestedAccess,\n      });\n    },\n    [daily]\n  );\n\n  const grantAccess = useCallback(\n    (id: '*' | string) => {\n      updateWaitingParticipantAccess(id, true);\n    },\n    [updateWaitingParticipantAccess]\n  );\n\n  const denyAccess = useCallback(\n    (id: '*' | string) => {\n      updateWaitingParticipantAccess(id, false);\n    },\n    [updateWaitingParticipantAccess]\n  );\n\n  return {\n    waitingParticipants,\n    grantAccess,\n    denyAccess,\n  };\n};\n","import DailyIframe, {\n  DailyCall,\n  DailyCallOptions,\n  DailyEvent,\n  DailyEventObject,\n} from '@daily-co/daily-js';\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { RecoilRoot } from 'recoil';\n\nimport { DailyContext } from './DailyContext';\nimport { DailyEventContext } from './DailyEventContext';\nimport { DailyParticipants } from './DailyParticipants';\nimport { DailyRoom } from './DailyRoom';\n\ntype DailyProperties = Pick<\n  DailyCallOptions,\n  | 'audioSource'\n  | 'dailyConfig'\n  | 'receiveSettings'\n  | 'subscribeToTracksAutomatically'\n  | 'token'\n  | 'url'\n  | 'userName'\n  | 'videoSource'\n>;\n\ntype Props =\n  | DailyProperties\n  | {\n      callObject: DailyCall;\n    };\n\ntype EventsMap = Partial<Record<DailyEvent, Map<number, Function>>>;\n\nexport const DailyProvider: React.FC<React.PropsWithChildren<Props>> = ({\n  children,\n  ...props\n}) => {\n  const [callObject, setCallObject] = useState<DailyCall | null>(\n    'callObject' in props ? props.callObject : null\n  );\n  const eventsMap = useRef<EventsMap>({});\n\n  /**\n   * Update callObject reference, in case externally created instance has changed.\n   */\n  useEffect(() => {\n    if (\n      'callObject' in props &&\n      callObject &&\n      props.callObject &&\n      // TODO: Replace _callFrameId check with something \"official\".\n      // @ts-ignore\n      callObject?._callFrameId !== props?.callObject?._callFrameId\n    ) {\n      setCallObject(props.callObject);\n    }\n  }, [callObject, props]);\n\n  /**\n   * Generic event handler to loop through registered event callbacks.\n   */\n  const handleEvent = useCallback((ev: DailyEventObject) => {\n    if (!('action' in ev)) return;\n    const event = ev.action as DailyEvent;\n    for (let cb of eventsMap.current?.[event]?.values() ?? []) {\n      cb(ev);\n    }\n  }, []);\n\n  /**\n   * In case events are setup via useDailyEvent before a DailyCall instance is available,\n   * we'll register the events whenever daily is set.\n   */\n  const initEventHandlers = useCallback(\n    (daily: DailyCall) => {\n      if (!daily) return;\n      (Object.keys(eventsMap.current) as DailyEvent[]).forEach((event) => {\n        daily\n          .off(event as DailyEvent, handleEvent)\n          .on(event as DailyEvent, handleEvent);\n      });\n    },\n    [handleEvent]\n  );\n\n  useEffect(() => {\n    if (callObject) return;\n    if ('callObject' in props) {\n      setCallObject(props.callObject);\n      initEventHandlers(props.callObject);\n      return;\n    }\n    const co = DailyIframe.createCallObject(props);\n    setCallObject(co);\n    initEventHandlers(co);\n  }, [callObject, initEventHandlers, props]);\n\n  /**\n   * Registers event callback.\n   */\n  const on = useCallback(\n    (ev: DailyEvent, cb: Function, key: number) => {\n      if (!eventsMap.current[ev]) {\n        eventsMap.current[ev] = new Map();\n        if (callObject) {\n          /**\n           * Make sure only 1 event listener is registered at anytime for handleEvent.\n           * Otherwise events sent from daily-js might be handled multiple times.\n           */\n          callObject.off(ev, handleEvent).on(ev, handleEvent);\n        }\n      }\n      if (!eventsMap.current[ev]?.has(key)) {\n        eventsMap.current[ev]?.set(key, cb);\n      }\n    },\n    [callObject, handleEvent]\n  );\n\n  /**\n   * Unregisters event callback.\n   */\n  const off = useCallback(\n    (ev: DailyEvent, key: number) => {\n      eventsMap.current[ev]?.delete(key);\n      if (eventsMap.current[ev]?.size === 0) {\n        callObject?.off(ev, handleEvent);\n        delete eventsMap.current[ev];\n      }\n    },\n    [callObject, handleEvent]\n  );\n\n  return (\n    <RecoilRoot>\n      <DailyContext.Provider value={callObject}>\n        <DailyEventContext.Provider value={{ on, off }}>\n          <DailyRoom>\n            <DailyParticipants>{children}</DailyParticipants>\n          </DailyRoom>\n        </DailyEventContext.Provider>\n      </DailyContext.Provider>\n    </RecoilRoot>\n  );\n};\n","import { DailyEventObjectAppMessage } from '@daily-co/daily-js';\nimport { useCallback } from 'react';\n\nimport { useDaily } from './useDaily';\nimport { useDailyEvent } from './useDailyEvent';\n\ntype SendAppMessage<Data = any> = (data: Data, to?: string) => void;\n\ninterface UseAppMessageArgs<Data> {\n  /**\n   * Optional event callback for [app-message](https://docs.daily.co/reference/daily-js/events/participant-events#app-message) event listener.\n   * Receives this hook's sendAppMessage as an additional argument to avoid circular dependencies.\n   */\n  onAppMessage?(\n    ev: DailyEventObjectAppMessage<Data>,\n    sendAppMessage?: SendAppMessage<Data>\n  ): void;\n}\n\n/**\n * React hook to setup [app-message](https://docs.daily.co/reference/daily-js/events/participant-events#app-message) listeners and\n * to send messages via [sendAppMessage](https://docs.daily.co/reference/daily-js/instance-methods/send-app-message).\n */\nexport const useAppMessage = <Data = any>({\n  onAppMessage,\n}: UseAppMessageArgs<Data> = {}) => {\n  const daily = useDaily();\n\n  const sendAppMessage: SendAppMessage<Data> = useCallback(\n    (data, to = '*') => {\n      if (!daily) return;\n      daily.sendAppMessage(data, to);\n    },\n    [daily]\n  );\n\n  const handleAppMessage = useCallback(\n    (ev: DailyEventObjectAppMessage<Data>) => {\n      onAppMessage?.(ev, sendAppMessage);\n    },\n    [onAppMessage, sendAppMessage]\n  );\n\n  useDailyEvent('app-message', handleAppMessage);\n\n  return sendAppMessage;\n};\n","import { useMediaTrack } from './useMediaTrack';\n\n/**\n * Returns a participant's audio track and state.\n * @param participantId The participant's session_id.\n */\nexport const useAudioTrack = (participantId: string) =>\n  useMediaTrack(participantId, 'audio');\n","import { useRecoilValue } from 'recoil';\n\nimport { localIdState } from '../DailyParticipants';\nimport { useParticipant } from './useParticipant';\n\n/**\n * Returns the [participants() object](https://docs.daily.co/reference/daily-js/instance-methods/participants) for the local user.\n */\nexport const useLocalParticipant = (): ReturnType<typeof useParticipant> => {\n  const localId = useRecoilValue(localIdState);\n  return useParticipant(localId);\n};\n","import { useRecoilValue } from 'recoil';\n\nimport type { Paths } from '../types/paths';\nimport {\n  ExtendedDailyParticipant,\n  participantPropertyState,\n} from '../DailyParticipants';\n\n/**\n * Returns a participant's property that you subscribe to.\n * @param participantId The participant's session_id.\n * @param propertyPath the participant property that you want to subscribe to.\n */\nexport const useParticipantProperty = (\n  participantId: string,\n  propertyPath: Paths<ExtendedDailyParticipant>\n) => {\n  return useRecoilValue(\n    participantPropertyState({ id: participantId, property: propertyPath })\n  );\n};\n","import { DailyRoomInfo } from '@daily-co/daily-js';\nimport { useRecoilValue } from 'recoil';\n\nimport { roomState } from '../DailyRoom';\n\n/**\n * Stateful hook to work with room, domain and token configuration for a daily room.\n * Includes room default values.\n */\nexport const useRoom = (): DailyRoomInfo | null => {\n  const room = useRecoilValue(roomState);\n  return room;\n};\n","import { useMediaTrack } from './useMediaTrack';\n\n/**\n * Returns a participant's screenAudio track and state.\n * @param participantId The participant's session_id.\n */\nexport const useScreenAudioTrack = (participantId: string) =>\n  useMediaTrack(participantId, 'screenAudio');\n","import { DailyScreenCaptureOptions, DailyTrackState } from '@daily-co/daily-js';\nimport { useCallback, useMemo } from 'react';\n\nimport { useDaily } from './useDaily';\nimport { useDailyEvent } from './useDailyEvent';\nimport { useParticipantIds } from './useParticipantIds';\n\nexport interface ScreenShare {\n  local: boolean;\n  screenAudio: DailyTrackState;\n  screenVideo: DailyTrackState;\n  screenId: string;\n  session_id: string;\n}\n\ninterface UseScreenShareArgs {\n  onLocalScreenShareStarted?(): void;\n  onLocalScreenShareStopped?(): void;\n}\n\n/**\n * Allows access to information about shared screens, and methods to start or stop a local screen share.\n */\nexport const useScreenShare = ({\n  onLocalScreenShareStarted,\n  onLocalScreenShareStopped,\n}: UseScreenShareArgs = {}) => {\n  const daily = useDaily();\n\n  const startScreenShare = useCallback(\n    (captureOptions?: DailyScreenCaptureOptions) => {\n      daily?.startScreenShare(captureOptions);\n    },\n    [daily]\n  );\n\n  const stopScreenShare = useCallback(() => {\n    daily?.stopScreenShare();\n  }, [daily]);\n\n  useDailyEvent(\n    'local-screen-share-started',\n    useCallback(\n      () => onLocalScreenShareStarted?.(),\n      [onLocalScreenShareStarted]\n    )\n  );\n  useDailyEvent(\n    'local-screen-share-stopped',\n    useCallback(\n      () => onLocalScreenShareStopped?.(),\n      [onLocalScreenShareStopped]\n    )\n  );\n\n  const screenIds = useParticipantIds({\n    filter: 'screen',\n  });\n  const screens = useMemo(\n    () =>\n      screenIds\n        .map((id) => {\n          const participants = Object.values(daily?.participants?.() ?? {});\n          const p = participants.find((p) => p.session_id === id);\n          if (!p) return;\n          return {\n            local: p.local,\n            screenAudio: p.tracks.screenAudio,\n            screenVideo: p.tracks.screenVideo,\n            screenId: `${id}-screen`,\n            session_id: id,\n          };\n        })\n        /**\n         * We'll need a type predicate to fully convince TypeScript that this array\n         * can't contain undefined. Find a good quick intro about type predicates at:\n         * https://fettblog.eu/typescript-type-predicates/\n         */\n        .filter((p): p is ScreenShare => !!p),\n    [daily, screenIds]\n  );\n\n  return {\n    isSharingScreen: screens.some((s) => s.local),\n    screens,\n    startScreenShare,\n    stopScreenShare,\n  };\n};\n","import { useMediaTrack } from './useMediaTrack';\n\n/**\n * Returns a participant's screenVideo track and state.\n * @param participantId The participant's session_id.\n */\nexport const useScreenVideoTrack = (participantId: string) =>\n  useMediaTrack(participantId, 'screenVideo');\n","import { useMediaTrack } from './useMediaTrack';\n\n/**\n * Returns a participant's video track and state.\n * @param participantId The participant's session_id.\n */\nexport const useVideoTrack = (participantId: string) =>\n  useMediaTrack(participantId, 'video');\n"],"names":["DailyContext","createContext","DailyEventContext","on","off","useDaily","useContext","uniqueCounter","getUnique","useDailyEvent","ev","callback","useState","isBlocked","setIsBlocked","reassignCount","useRef","eventId","useMemo","useEffect","current","console","error","timeout","setTimeout","clearTimeout","useThrottledDailyEvent","throttleTimeout","throttledEvents","emitEvents","throttle","length","trailing","push","localIdState","atom","key","default","participantsState","participantState","selectorFamily","get","id","find","p","session_id","participantPropertyState","property","participant","path","split","reduce","r","k","resolveParticipantPath","DailyParticipants","children","daily","useRecoilCallback","set","snapshot","sessionId","activeSpeaker","peerId","getPromise","participants","prev","map","last_active","Date","initParticipants","local","Object","values","interval","setInterval","clearInterval","handleInitEvent","useCallback","evts","filter","idx","arr","findIndex","transact_UNSTABLE","forEach","some","reset","React","roomState","DailyRoom","updateRoom","meetingState","room","useParticipant","onParticipantLeft","onParticipantUpdated","useRecoilValue","filteredEvts","activeIdState","mediaTrackState","atomFamily","state","subscribed","useMediaTrack","participantId","type","trackState","handleNewParticipantState","action","tracks","setInitialState","initialState","_participant$tracks","isOff","persistentTrack","undefined","generalCameraState","generalMicrophoneState","cameraDevicesState","microphoneDevicesState","speakerDevicesState","inputSettingsState","errorState","liveStreamingState","errorMsg","isLiveStreaming","layout","useLocalSessionId","topologyState","networkQualityState","networkThresholdState","defaultFilter","Boolean","defaultSort","useParticipantIds","sort","onActiveSpeakerChange","onParticipantJoined","allParticipants","sortedIds","sortFn","filterFn","owner","record","screen","a","b","participantReceiveSettingsState","recordingState","isLocalParticipantRecorded","isRecording","waitingParticipantsState","waitingParticipantState","awaitingAccess","level","name","allWaitingParticipantsSelector","selector","props","callObject","setCallObject","eventsMap","_callFrameId","_props$callObject","handleEvent","_eventsMap$current","_eventsMap$current$ev2","cb","initEventHandlers","keys","event","co","DailyIframe","createCallObject","Map","_eventsMap$current$ev3","has","size","RecoilRoot","Provider","value","ignoreLocal","recentActiveId","setActiveId","activeParticipant","_daily$participants","onAppMessage","sendAppMessage","data","to","handleAppMessage","camState","micState","camDevices","micDevices","speakerDevices","refreshDevices","navigator","_navigator","mediaDevices","_navigator$mediaDevic","getUserMedia","_navigator2","_navigator2$mediaDevi","enumerateDevices","devices","cams","d","kind","deviceId","mics","speakers","getInputDevices","camera","mic","speaker","mapDevice","device","prevDevices","selected","_prevDevices$find","sortDeviceByLabel","label","prevCams","prevMics","prevSpeakers","e","updateDeviceStates","currentCamState","currentMicState","awaitingCamAccess","video","awaitingMicAccess","audio","_tracks$audio","blocked","_tracks$audio$blocked","byDeviceInUse","m","_tracks$audio2","_tracks$audio2$blocke","byDeviceMissing","_tracks$audio3","_tracks$audio3$blocke","byPermissions","_tracks$video","_tracks$video$blocked","_tracks$video2","_tracks$video2$blocke","_tracks$video3","_tracks$video3$blocke","audioOk","videoOk","setCamera","setInputDevicesAsync","audioDeviceId","videoDeviceId","setMicrophone","setSpeaker","setOutputDeviceAsync","outputDeviceId","cameras","hasCamError","includes","hasMicError","microphones","onError","onInputSettingsUpdated","inputSettings","updateInputSettingsState","getInputSettings","then","updateInputSettings","onLiveStreamingError","onLiveStreamingStarted","onLiveStreamingStopped","prevState","startLiveStreaming","options","stopLiveStreaming","updateLiveStreaming","localId","onNetworkConnection","onNetworkQualityChange","topology","quality","threshold","handleNetworkConnection","handleNetworkQualityChange","prevQuality","prevThreshold","getStats","newStats","getNetworkStats","stats","propertyPath","onReceiveSettingsUpdated","baseSettings","receiveSettings","ids","entries","settings","updateReceiveSettings","onRecordingData","onRecordingError","onRecordingStarted","onRecordingStopped","setState","useSetRecoilState","localSessionId","recordingParticipantIds","hasRecordingParticipants","isLocalParticipantRecording","s","preset","recordingId","recordingStartedDate","startedBy","startRecording","stopRecording","updateRecording","onLocalScreenShareStarted","onLocalScreenShareStopped","startScreenShare","captureOptions","stopScreenShare","screenIds","screens","screenAudio","screenVideo","screenId","isSharingScreen","onWaitingParticipantAdded","onWaitingParticipantRemoved","onWaitingParticipantUpdated","waitingParticipants","handleAdded","wps","handleRemoved","wp","handleUpdated","updateWaitingParticipantAccess","grantRequestedAccess","updateWaitingParticipant","updateWaitingParticipants","*","grantAccess","denyAccess"],"mappings":"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"}